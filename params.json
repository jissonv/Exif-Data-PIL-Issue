{
  "name": "Notes",
  "tagline": "work ",
  "body": "### Presrve exif data of the images while resizing it using PIL.\r\n<p>In one of my project I faced an issue with the PIL library that , the image lost its exif data after resized the image using PIL<br/>\r\n<p>I faced it for an an android app whose back end  in python–django. When a  client uploads an image to the server, and server in turn  resizes  the images with some predefined  sizes.  I resized the image using the PIL . But after resize the image losts its exif data. Client needs the exif data to layout the image.\r\n\r\n\r\n### How I solved the issue:\r\n<ul>\r\n<li>Insall gexiv2.<br/>\r\n<li>Resistrict image uploading only through TemporaryFileUploadHandler.<br/>\r\n<li>Create a temp Folder in Server - to save the resize image temporarily.<br/>\r\n<li>copy the exif data of the orignal image to the resized image using gexiv2 liberary.<br/>\r\n</ul>\r\n\r\n### Steps in detail:\r\nFor building and installing gexiv2 refer <a href=\"https://wiki.gnome.org/Projects/gexiv2/BuildingAndInstalling\">gexiv2</a>\r\n\r\n### How to do image upload only via TemporaryFileUploadHandler:\r\nEdit the settings.py file as follows (django1.4)\r\n\r\nFILE_UPLOAD_HANDLERS = (<br/>\r\n    'django.core.files.uploadhandler.TemporaryFileUploadHandler',<br/>\r\n)<br/>\r\n\r\n### Procedure\r\n<ul> \r\n<li>get the image file and file_path\r\n<li> get the image name and extension\r\n<li> open image using PIL\r\n<li> get exif data of the orginal image using gexiv2\r\n<li> resize the image\r\n<li> Save the resized image to temp folder\r\n<li> Copy the exif data of the orignal image to resized\r\n<li> save image to s3\r\n<li> remove the resized image form temp folder\r\n</ul>\r\n### Sample Code\r\n<p>\r\nFrom PIL import Image<br/>\r\n \r\nImage_file =  request.FILES[‘image’]# get image from request (piston I used)<br/>\r\nfile_path = image_file. temporary_file_path() #all images have file path since we upload image only through TemporaryFileUploadHandler<br/>\r\nsent_image_name = image_file.name<br/>\r\nfile_extension = sent_image_name.rsplit('.', 1)[-1]<br/>\r\nfile_name = ….+ '.' + file_extension<br/>\r\n\r\nif file_extension in ('jpg', 'JPG'):<br/>\r\n            file_save_extension = 'JPEG'<br/>\r\n        else:<br/>\r\n            file_save_extension = file_extension<br/>\r\n\r\ntemp_image_path = CONFIG['resize_image_folder'] <br/>\r\nfile_path = imageFile.temporary_file_path()<br/>\r\n \r\nim = Image.open(file_path) # open the image using PIL and save it to the temp dir<br/> \r\nexif = GExiv2.Metadata(file_path)<br/>\r\nim.thumbnail(thumbnail_size, Image.ANTIALIAS)<br/>\r\nif file_extension in ('jpg', 'JPG' , 'jpeg', 'JPEG') and im.mode == 'RGB':<br/>\r\n     resized_image_ = temp_image_path +  str(<br/>\r\n                                             thumbnail_size[0]) + '_' + file_name<br/>\r\n     im.save(resized_image_, file_save_extension)<br/>\r\n     self.set_exif_to_temp_image(exif, resized_image_,<br/>\r\n                                                    im.size[0], im.size[1]) # save resized img to temp<br/>\r\n\r\n\r\n// store the image to some image store using image location resized_image_<br/>\r\n// finally remove the temp image\r\nos.remove(resized_image_name)\r\n\r\n<p><br/>\r\ndef set_exif_to_temp_image(self, exif, resized_image_name,x_dim, y_dim):<br/><br/>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;# get exif of the resized image<br/>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;newExif = GExiv2.Metadata(resized_image_name)<br/>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;# save the exif data of orginal image to newExif<br/>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;for tag in exif.get_exif_tags():<br/>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;newExif[tag] = exif[tag]<br/>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;newExif['Exif.Photo.PixelXDimension'] = str(x_dim)#update some exif data of the resized image<br/>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;newExif['Exif.Photo.PixelYDimension'] = str(y_dim)<br/>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;try:<br/>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;newExif.save_file()<br/>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;except Exception:<br/>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;logger.exception('Error in save exif data')<br/>\r\n\r\n### Support or Contact\r\nHaving trouble email jissonv@gmail.com\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}